MATCH (n)-[e:person_person]-(m) RETURN n,e,m
查询边为人物关系的节点和路径。
MATCH (n)-[e:person_person]-(m) RETURN n,e,m
在图中查找所有通过person_person类型关系连接的节点对n和m，并返回这些节点对以及它们之间的person_person关系。
MATCH (n)-[e:person_person]-(m) RETURN n,e,m
将返回图中所有通过person_person关系相连的节点和关系。
MATCH (p:plan {name: "面壁计划"})-[e]-(neighbor:person) RETURN neighbor,p,e
与面壁计划有关的人有哪些？
MATCH (a:person {name: "叶文洁"})-[e1:person_person]->(n)<-[e2:person_person]-(b:person {name: "汪淼"}) RETURN a,b,n,e1,e2
查询叶文洁和汪淼这两个人之间的的共同关联的人物都有谁。
MATCH (p:person {name: "叶文洁"}) SET p.introduce = "清华大学教授、ETO精神领袖、首位和三体人交流的人" RETURN p
找到人物叶文洁，设置她的介绍信息为清华大学教授、ETO精神领袖、首位和三体人交流的人，返回此节点。
CREATE (a:person {introduce: "物理学教授", name: "bbb"}) RETURN a
创建一个人物节点，其介绍为物理学教授，姓名为bbb，返回此节点。
MATCH (a:person {name: "叶文洁"})-[e1:person_person]->(n)-[e2:person_person]->(b:person) RETURN a,b,n,e1,e2
查询与叶文洁关联的人物有关的人物，返回子图。