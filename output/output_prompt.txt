movie
MATCH (a{id:"2399",name:"Zac Efron"}) RETURN DISTINCT a.born AS born
在图中查找,返回a节点的born属性值,并将该值重命名为born
MATCH (a{id:"19"}) RETURN a.name AS name
从数据库中查找,返回a节点的name属性值,并将该值重命名为name
OPTIONAL MATCH (a{id:"432"}) RETURN a.id AS id SKIP 9
以可选的方式找到,返回a节点的id属性值,并将该值重命名为id,跳过前9条数据
MATCH (a{id:"3252",title:"The Silence of the Lambs",tagline:"To enter the mind of a killer she must challenge the mind of a madman."}) RETURN a.tagline AS tagline
从数据库中查找,返回a节点的tagline属性值,并将该值重命名为tagline
MATCH (a{id:"68"}) RETURN a.id AS id SKIP 6
查找图数据库中,返回节点a的id属性值,并将该值重命名为id,跳过前6条数据
MATCH p=(michael{id:"504",name:"Frank Sivero",born:"1952"})-[]->() RETURN p
查找图数据库中符合(michael{id:"504",name:"Frank Sivero",born:"1952"})-[]->()模式的节点和关系,返回匹配的链路p
OPTIONAL MATCH p=(michael{id:"789",name:"Michael Imperioli",born:"1966"})-[]->() RETURN p
以可选的方式从数据库中查找符合(michael{id:"789",name:"Michael Imperioli",born:"1966"})-[]->()模式的节点和关系,返回匹配的链路p
MATCH p=(michael{id:"571"})-[]->() RETURN DISTINCT p
找到符合(michael{id:"571"})-[]->()模式的节点和关系,返回匹配的链路p
MATCH p=(michael{id:"2894",name:"Richard Griffiths",born:"1947"})-[]->() RETURN p
找到符合(michael{id:"2894",name:"Richard Griffiths",born:"1947"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p
MATCH p=(michael{id:"2232"})-[]->() RETURN DISTINCT p
查询符合(michael{id:"2232"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p
MATCH p=(michael{id:"2767",title:"The Usual Suspects"})-[]->() RETURN p
找到符合(michael{id:"2767",title:"The Usual Suspects"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p
MATCH p=(michael{id:"295"})-[]->() RETURN p
获得符合(michael{id:"295"})-[]->()模式的节点和关系,将匹配到的路径赋值给变量p,返回匹配的链路p
OPTIONAL MATCH p=(michael{id:"901"})-[]->() RETURN p SKIP 7
以可选的方式查找图数据库中符合(michael{id:"901"})-[]->()模式的节点和关系,返回匹配的链路p,跳过前7条数据
MATCH (n:person) RETURN n.name,n.name ORDER BY n.name
从数据库中查找的人n,返回n节点的name属性值,n节点的name属性值,同时按照节点的name属性排序
MATCH (n:genre) RETURN n.id,n.name ORDER BY n.id
查询的流派n,返回n节点的id属性值,n节点的name属性值,同时按照节点的id属性排序
MATCH (n:keyword) RETURN n.id,n.name ORDER BY n.id DESC
从数据库中查找的关键字n,返回n节点的id属性值,n节点的name属性值,按照节点的id属性降序排列返回的结果
MATCH (n:movie) RETURN n.title,n.tagline ORDER BY n.tagline DESC
获得的电影n,返回n节点的title属性值,n节点的tagline属性值,按照节点的tagline属性降序排列返回的结果
MATCH (n:user) RETURN n.login,n.id ORDER BY n.id
查找数据库中的用户n,返回n节点的login属性值,n节点的id属性值,按照节点的id属性升序排列返回的结果
MATCH (p:person{id:"502",name:"Gastone Moschin"})-[e]-(neighbor:movie) RETURN p,e,neighbor
查找图数据库中与id为"502",名为"Gastone Moschin"的人p有关的电影有哪些?返回相应的节点和关系
MATCH (p:person{id:"1861"})-[e]-(neighbor:movie) RETURN p,e,neighbor
查找数据库中与id为"1861"的人p有关的电影有哪些?返回对应的人,e,电影
MATCH (p:person{id:"2768",name:"Kevin Spacey",born:"1959"})-[e]-(neighbor:movie) RETURN DISTINCT p,e,neighbor
查询与id为"2768",姓名为"Kevin Spacey",出生年份为"1959"的人p有关的电影有哪些?返回子图
MATCH (p:person{id:"1761",name:"Adrian Holmes",born:"1974"})-[e]-(neighbor:movie) RETURN p,e,neighbor
查询与id为"1761",姓名为"Adrian Holmes",出生年份为"1974"的人p有关的电影有哪些?返回子图
MATCH (p:genre{id:"611"})-[e]-(neighbor:movie) RETURN p,e,neighbor
查找图数据库中与id为"611"的流派p有关的电影有哪些?返回相应的节点和关系
MATCH (p:keyword{id:"3156"})-[e]-(neighbor:movie) RETURN p,e,neighbor
从数据库中查找与id为"3156"的关键字p有关的电影有哪些?返回子图
MATCH (p:movie{id:"1096",title:"3 Days to Kill",tagline:"amazing killing time"})-[e]-(neighbor:person) RETURN p,e,neighbor
在图中查找与id为"1096",标题为"3 Days to Kill",标签为"amazing killing time"的电影p有关的人有哪些?返回相应的节点和关系
MATCH (p:movie{id:"3390",title:"The King's Speech"})-[e]-(neighbor:user) RETURN DISTINCT p,e,neighbor
在图中查找与id为"3390",标题为"The Kings Speech"的电影p有关的用户有哪些?返回子图
MATCH (p:movie{id:"2232",title:"Hansel & Gretel: Witch Hunters",tagline:"Classic tale. New twist."})-[e]-(neighbor:person) RETURN p,e,neighbor SKIP 5
查询与id为"2232",标题为"Hansel & Gretel: Witch Hunters",标签为"Classic tale. New twist."的电影p有关的人有哪些?返回子图,跳过前5条数据
MATCH (p:movie{id:"3624",title:"The Iron Lady",tagline:"Never compromise"})-[e]-(neighbor:person) RETURN p,e,neighbor
从数据库中查找与id为"3624",标题为"The Iron Lady",标签为"Never compromise"的电影p有关的人有哪些?返回子图
MATCH (p:movie{id:"1856",title:"Epic",tagline:"Discover a world beyond your imagination"})-[e]-(neighbor:person) RETURN p,e,neighbor
从数据库中查找与id为"1856",标题为"Epic",标签为"Discover a world beyond your imagination"的电影p有关的人有哪些?返回子图
MATCH (p:movie{id:"1356",title:"The Monuments Men"})-[e]-(neighbor:genre) RETURN p,e,neighbor
获得与id为"1356",标题为"The Monuments Men"的电影p有关的流派有哪些?返回子图
MATCH (p:movie{id:"1293",title:"Gravity",tagline:"Don't Let Go"})-[e]-(neighbor:keyword) RETURN p,e,neighbor
查找数据库中与id为"1293",标题为"Gravity",标签为"Dont Let Go"的电影p有关的关键字有哪些?返回相应的节点和关系
MATCH (p:user{id:"383"})-[e]-(neighbor:user) RETURN p,e,neighbor
从数据库中查找与id为"383"的用户p有关的用户有哪些?返回子图
MATCH (p:user{id:"421"})-[e]-(neighbor:movie) RETURN p,e,neighbor
在图中查找与id为"421"的用户p有关的电影有哪些?返回子图
MATCH (p:user{id:"54"})-[e]-(neighbor:user) RETURN p,e,neighbor
查找数据库中与id为"54"的用户p有关的用户有哪些?返回对应的用户,e,用户
MATCH (n)-[e:acted_in]-(m) RETURN n,e,m
从数据库中查找所有通过acted_in类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:directed]-(m) RETURN n,e,m
在图中查找所有通过directed类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:produce]-(m) RETURN DISTINCT n,e,m
在图中查找所有通过produce类型关系连接的节点对n和m,返回对应的n,出版,m
MATCH (n)-[e:write]-(m) RETURN n,e,m
从数据库中查找所有通过write类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:has_genre]-(m) RETURN n,e,m
获得所有通过has_genre类型关系连接的节点对n和m,返回对应的n,has_genre,m
MATCH (n)-[e:has_keyword]-(m) RETURN n,e,m
查找图数据库中所有通过has_keyword类型关系连接的节点对n和m,返回对应的n,has_keyword,m
MATCH (n)-[e:acted_in]-(m) RETURN n,e,m
查找数据库中所有通过acted_in类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:rate]-(m) RETURN n,e,m
从数据库中查找所有通过rate类型关系连接的节点对n和m,返回子图
MATCH (n)-[e:directed]-(m) RETURN n,e,m
查询所有通过directed类型关系连接的节点对n和m,返回子图
MATCH (n)-[e:produce]-(m) RETURN n,e,m
从数据库中查找所有通过produce类型关系连接的节点对n和m,返回对应的n,出版,m
MATCH (n)-[e:write]-(m) RETURN n,e,m SKIP 7
在图中查找所有通过write类型关系连接的节点对n和m,返回对应的n,写,m,跳过前7条数据
MATCH (n)-[e:has_genre]-(m) RETURN n,e,m
在图中查找所有通过has_genre类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:has_keyword]-(m) RETURN n,e,m
查找数据库中所有通过has_keyword类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (n)-[e:is_friend]-(m) RETURN n,e,m
查找数据库中所有通过is_friend类型关系连接的节点对n和m,返回对应的n,是朋友关系,m
MATCH (n)-[e:rate]-(m) RETURN n,e,m
在图中查找所有通过rate类型关系连接的节点对n和m,返回子图
MATCH (n)-[e:is_friend]-(m) RETURN n,e,m
获得所有通过is_friend类型关系连接的节点对n和m,返回相应的节点和关系
MATCH (m:genre{id:"1257",name:"Musical"})<-[:has_genre]-(a:movie) RETURN a,m
找到has_genreid为"1257",姓名为"Musical"的流派m的电影有哪些?返回节点a,节点m
MATCH (m:keyword{id:"1544"})<-[:has_keyword]-(a:movie) RETURN a,m
查找数据库中has_keywordid为"1544"的关键字m的电影有哪些?返回节点a,节点m
MATCH (m:movie{id:"1"})<-[:acted_in]-(a:person) RETURN a,m
查找图数据库中参演id为"1"的电影m的人有哪些?返回节点a,节点m
MATCH (m:movie{id:"471"})<-[:rate]-(a:user) RETURN a,m
获得打分id为"471"的电影m的用户有哪些?返回节点a,节点m
OPTIONAL MATCH (m:movie{id:"681",title:"Fight Club"})<-[:directed]-(a:person) RETURN a,m LIMIT 239
以可选的方式查找图数据库中导演id为"681",标题为"Fight Club"的电影m的人有哪些?返回节点a,节点m,保留前239条数据
MATCH (m:movie{id:"641"})<-[:produce]-(a:person) RETURN a,m
获得出版id为"641"的电影m的人有哪些?返回节点a,节点m
MATCH (m:movie{id:"1097"})<-[:write]-(a:person) RETURN a,m
找到写id为"1097"的电影m的人有哪些?返回节点a,节点m
MATCH (m:user{id:"23"})<-[:is_friend]-(a:user) RETURN a,m
在图中查找是朋友关系id为"23"的用户m的用户有哪些?返回节点a,节点m
MATCH (u:person{id:"1252",name:"Chris Buck",born:"1000"})-[r:acted_in]->(m:movie) RETURN DISTINCT m.id,r
找到id为"1252",名字为"Chris Buck",出生年份为"1000"的人u参演的电影有哪些?返回m节点的id属性值,边r
MATCH (u:person{id:"1698",name:"Benedict Cumberbatch"})-[r:directed]->(m:movie) RETURN DISTINCT m.id,r
找到id为"1698",名为"Benedict Cumberbatch"的人u导演的电影有哪些?返回m节点的id属性值,边r
MATCH (u:person{id:"2073",name:"Joss Whedon"})-[r:produce]->(m:movie) RETURN m.title,r
从数据库中查找id为"2073",名称为"Joss Whedon"的人u出版的电影有哪些?返回m节点的title属性值,边r
MATCH (u:person{id:"2020"})-[r:write]->(m:movie) RETURN m.id,r
从数据库中查找id为"2020"的人u写的电影有哪些?返回m节点的id属性值,边r
MATCH (u:movie{id:"710",title:"Star Wars: Episode V - The Empire Strikes Back",tagline:"The Adventure Continues..."})-[r:has_genre]->(m:genre) RETURN m.name,r
查找数据库中id为"710",标题为"Star Wars: Episode V - The Empire Strikes Back",标签为"The Adventure Continues..."的电影uhas_genre的流派有哪些?返回m节点的name属性值,边r
MATCH (u:movie{id:"2498",title:"Beowulf",tagline:"Evil breeds pain."})-[r:has_keyword]->(m:keyword) RETURN DISTINCT m.id,r LIMIT 1000
查找数据库中id为"2498",标题为"Beowulf",标签为"Evil breeds pain."的电影uhas_keyword的关键字有哪些?返回m节点的id属性值,边r,保留前1000条数据
MATCH (u:user{id:"66"})-[r:rate]->(m:movie) RETURN m.tagline,r
查找图数据库中id为"66"的用户u打分的电影有哪些?返回m节点的tagline属性值,边r
MATCH (u:user{id:"69",login:"Oliver"})-[r:is_friend]->(m:user) RETURN DISTINCT m.id,r
查询id为"69",登录用户名为"Oliver"的用户u是朋友关系的用户有哪些?返回m节点的id属性值,边r
